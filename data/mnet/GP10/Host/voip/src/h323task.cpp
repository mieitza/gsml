
/*
 ****************************************************************************************
 *																						*
 *			Copyright Cisco Systems, Inc 2000 All rights reserved						*
 *																						*
 *--------------------------------------------------------------------------------------*
 *																						*
 *	File				: H323Task.cpp													*
 *																						*
 *	Description			: The "main" H.323 task entry point functions					*
 *																						*
 *	Author				: Dinesh Nambisan												*
 *						  [Code borrowed liberally from original work 					*
 *						  of Oleg Turovski]												*
 *																						*
 *----------------------- Revision history ---------------------------------------------*
 * Time  | Date    | Name   | Description 												*
 *--------------------------------------------------------------------------------------*
 * 00:00 |03/24/99 | DSN    | File created												*
 *		 |		   |		|															*
 *		 |		   |	    |															*
 ****************************************************************************************
 */

#include <stdlib.h>
#include <string.h>
#include <cm.h>
#include <stkutils.h>

#include <tickLib.h>
#include <drv\timer\timerDev.h>
#include <taskLib.h>
#include <errnolib.h>
#include <time.h>
extern "C" {
#include <mti.h>
#include <seli.h>
#include <pi.h>
#include <ci.h>
#include <cibuf.h>
}

#include "Os/JCTask.h"
#include "GP10OsTune.h"
#include "logging\vcmodules.h"
#include "logging\vclogging.h"
#include "vipermem.h"
#include "h323task.h"
#include "ccb.h"
#include "rtptask.h"
#include "eventhandlers.h"
#include "voip\vblink.h"
#include "voip\voipapi.h"
#include "h323interface.h"
#include "viperip.h"

#ifndef LOOPBACK_MODE
#include "oam_api.h"
#include "alarmcode.h"
#include "mnetmoduleid.h"
#endif


/************* THE RADVISION H.323 STACK CONFIGURATION IN A BUFFER *********************/
/************* PLEASE DO NOT MODIFY !!! ************************************************/
unsigned char RadConfigBuffer[] = {
	0x2a, 0x2a, 0x42, 0x55, 0x46, 0x2a, 0x2a, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x08, 0xc4, 
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0a, 0x68, 0x34, 0x35, 0x30, 0x73, 0x79, 0x73, 
	0x74, 0x65, 0x6d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
	0x00, 0x64, 0x00, 0x00, 0x00, 0x08, 0x6d, 0x61, 0x78, 0x43, 
	0x61, 0x6c, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 
	0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0b, 0x6d, 0x61, 0x78, 
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x00, 0x00, 
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 
	0x73, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x64, 
	0x00, 0x00, 0x00, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x6c, 
	0x6c, 0x73, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x68, 
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x01, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x52, 
	0x41, 0x53, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x00, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x09, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x52, 
	0x41, 0x53, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x07, 0x6d, 0x61, 0x78, 0x46, 0x61, 
	0x69, 0x6c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x61, 
	0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 
	0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 
	0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 
	0x79, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 
	0x74, 0x47, 0x61, 0x74, 0x65, 0x6b, 0x65, 0x65, 0x70, 0x65, 
	0x72, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 
	0x65, 0x73, 0x73, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 
	0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x69, 0x70, 0x0a, 0x01, 
	0x02, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 
	0xb7, 0x00, 0x00, 0x00, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x00, 0x00, 
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 
	0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x76, 0x65, 0x6e, 0x64, 
	0x6f, 0x72, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 
	0x72, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0xb5, 
	0x00, 0x00, 0x00, 0x0e, 0x74, 0x33, 0x35, 0x43, 0x6f, 0x75, 
	0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x00, 0x00, 
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0c, 0x74, 0x33, 0x35, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 
	0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
	0x53, 0x4c, 0x00, 0x00, 0x00, 0x10, 0x6d, 0x61, 0x6e, 0x75, 
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x43, 0x6f, 
	0x64, 0x65, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 
	0x0b, 0x00, 0x00, 0x00, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 
	0x63, 0x74, 0x49, 0x64, 0x43, 0x69, 0x73, 0x63, 0x6f, 0x20, 
	0x47, 0x50, 0x2d, 0x31, 0x30, 0x00, 0x00, 0x00, 0x05, 0x01, 
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x09, 0x76, 0x65, 
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x31, 0x2e, 0x30, 
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 
	0x6c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x02, 0x6d, 0x63, 0x00, 0x00, 0x00, 0x04, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x75, 
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 
	0x64, 0x65, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x69, 
	0x6e, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x00, 0x00, 
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x31, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 
	0x08, 0x00, 0x00, 0x00, 0x07, 0x68, 0x33, 0x32, 0x33, 0x2d, 
	0x49, 0x44, 0x00, 0x49, 0x00, 0x4d, 0x00, 0x53, 0x00, 0x49, 
	0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 
	0x00, 0x00, 0x14, 0x67, 0x61, 0x74, 0x65, 0x6b, 0x65, 0x65, 
	0x70, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 
	0x69, 0x65, 0x72, 0x00, 0x47, 0x00, 0x4d, 0x00, 0x43, 0x00, 
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0e, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x04, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x76, 
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x05, 0x00, 
	0x00, 0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0x0e, 0x74, 0x33, 
	0x35, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 
	0x64, 0x65, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x74, 0x33, 0x35, 0x45, 0x78, 
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 
	0x04, 0x01, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x09, 
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x4a, 
	0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x20, 0x56, 0x69, 0x70, 
	0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x09, 
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x31, 
	0x2e, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x13, 0x72, 0x61, 0x73, 0x4d, 0x75, 
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 
	0x72, 0x65, 0x73, 0x73, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x69, 0x70, 0x41, 
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x00, 0x00, 0x00, 0x04, 
	0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x69, 
	0x70, 0xe0, 0x00, 0x01, 0x29, 0x00, 0x00, 0x00, 0x04, 0x00, 
	0x00, 0x00, 0x06, 0xb6, 0x00, 0x00, 0x00, 0x04, 0x70, 0x6f, 
	0x72, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0x72, 0x61, 0x73, 0x50, 0x6f, 
	0x72, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 
	0x74, 0x72, 0x69, 0x65, 0x73, 0x00, 0x00, 0x00, 0x01, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x51, 0x39, 
	0x33, 0x31, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x96, 0x00, 0x00, 0x00, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 
	0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0xf4, 0x00, 
	0x00, 0x00, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 
	0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x06, 0xb8, 0x00, 0x00, 0x00, 0x11, 
	0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x08, 
	0x6d, 0x61, 0x78, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x00, 0x00, 
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 
	0x65, 0x70, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x6d, 0x61, 0x6e, 0x75, 
	0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 
	0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x01, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x68, 
	0x32, 0x34, 0x35, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x6d, 0x61, 0x73, 0x74, 
	0x65, 0x72, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x00, 0x00, 0x00, 
	0x03, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x0c, 
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x79, 
	0x70, 0x65, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 
	0x64, 0x00, 0x00, 0x00, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 
	0x75, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x00, 0x00, 0x00, 
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x61, 
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 
	0x74, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x00, 0x00, 
	0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x00, 
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 
	0x65, 0x78, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 
	0x74, 0x79, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x68, 0x32, 0x32, 0x35, 0x30, 
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 
	0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 
	0x00, 0x00, 0x17, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x65, 0x6c, 0x61, 0x79, 
	0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00, 0x06, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x72, 
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 
	0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x00, 0x00, 0x00, 0x07, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x6d, 
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x43, 0x61, 
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x00, 0x00, 
	0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x6e, 0x69, 0x43, 
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 
	0x6e, 0x63, 0x65, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x6d, 0x65, 0x64, 0x69, 
	0x61, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 
	0x69, 0x74, 0x79, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x00, 0x00, 
	0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x12, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x00, 
	0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x10, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 
	0x7a, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x00, 0x00, 
	0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 
	0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x00, 0x00, 0x00, 
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 
	0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x00, 0x00, 0x00, 0x09, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x64, 
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x00, 0x00, 0x00, 0x06, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x74, 0x72, 
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 
	0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x00, 0x00, 0x00, 0x07, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x6d, 
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x43, 0x61, 
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x00, 0x00, 
	0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x6e, 0x69, 0x43, 
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 
	0x6e, 0x63, 0x65, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x6d, 0x65, 0x64, 0x69, 
	0x61, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 
	0x69, 0x74, 0x79, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x00, 0x00, 
	0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x12, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x00, 
	0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x10, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 
	0x7a, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x00, 0x00, 
	0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 
	0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x00, 0x00, 0x00, 
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 
	0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x00, 0x00, 0x00, 0x09, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x64, 
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x00, 0x00, 0x00, 0x06, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x72, 0x65, 
	0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x72, 
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 
	0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x00, 0x00, 0x00, 0x07, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x6d, 
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x43, 0x61, 
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x00, 0x00, 
	0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x16, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x6e, 0x69, 0x43, 
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 
	0x6e, 0x63, 0x65, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x6d, 0x65, 0x64, 0x69, 
	0x61, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 
	0x69, 0x74, 0x79, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x00, 0x00, 
	0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x12, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x00, 
	0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x10, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 
	0x7a, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x00, 0x00, 
	0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 
	0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x00, 0x00, 0x00, 
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 
	0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x00, 0x00, 0x00, 0x09, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x64, 
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x00, 0x00, 0x00, 0x06, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x6d, 0x63, 
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x17, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 
	0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 
	0x65, 0x6e, 0x63, 0x65, 0x4d, 0x43, 0x00, 0x00, 0x00, 0x07, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x64, 
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x7a, 
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 
	0x63, 0x65, 0x4d, 0x43, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x72, 0x74, 0x63, 
	0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 
	0x72, 0x6f, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 
	0x69, 0x74, 0x79, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x6d, 0x65, 0x64, 0x69, 
	0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x7a, 0x61, 
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 
	0x6c, 0x69, 0x74, 0x79, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x68, 0x32, 0x36, 
	0x31, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x63, 
	0x6b, 0x65, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 
	0x69, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x00, 0x00, 
	0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x31, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x1a, 0x63, 0x61, 0x70, 0x61, 0x62, 
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 
	0x72, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 
	0x6c, 0x69, 0x74, 0x79, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x72, 0x65, 0x63, 
	0x65, 0x69, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x00, 
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0b, 0x67, 0x73, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x52, 
	0x61, 0x74, 0x65, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 
	0x00, 0x21, 0x00, 0x00, 0x00, 0x0d, 0x61, 0x75, 0x64, 0x69, 
	0x6f, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x00, 
	0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0c, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x4e, 
	0x6f, 0x69, 0x73, 0x65, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x73, 0x63, 0x72, 
	0x61, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x00, 0x00, 0x00, 0x05, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x32, 
	0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
	0x00, 0x00, 0x1a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 
	0x69, 0x74, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 
	0x74, 0x72, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x00, 
	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 
	0x74, 0x79, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 
	0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x00, 0x00, 0x00, 
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 
	0x67, 0x73, 0x6d, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 
	0x64, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x00, 
	0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 
	0x00, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x6e, 0x69, 
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x00, 0x00, 0x00, 0x09, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x63, 0x6f, 
	0x6d, 0x66, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x69, 0x73, 0x65, 
	0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x09, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 
	0x65, 0x64, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x33, 0x00, 0x00, 0x00, 0x06, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x63, 
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4e, 
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x00, 0x00, 0x00, 0x06, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x63, 0x61, 
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x00, 0x00, 
	0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x55, 
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x61, 
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x00, 0x00, 
	0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0b, 0x62, 0x61, 0x73, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 
	0x6e, 0x67, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x00, 0x00, 0x00, 0x05, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31, 
	0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1a, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 
	0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 
	0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x00, 
	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x18, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x74, 0x61, 0x6e, 
	0x65, 0x6f, 0x75, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x00, 0x00, 0x00, 0x07, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x31, 
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
	0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x32, 0x00, 0x00, 
	0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x32, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x08, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x32, 
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x00, 0x00, 
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x00, 
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x04, 0x6e, 0x61, 0x6d, 0x65, 
	0x67, 0x73, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x61, 0x74, 
	0x65, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 
	0x70, 0x65, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 
	0x44, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x67, 0x73, 0x6d, 
	0x46, 0x75, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x00, 0x00, 
	0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 
	0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x6e, 0x69, 0x74, 
	0x53, 0x69, 0x7a, 0x65, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x63, 0x6f, 0x6d, 
	0x66, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x00, 
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x09, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 0x65, 
	0x64, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x14, 0x69, 0x73, 0x44, 0x79, 0x6e, 0x61, 
	0x6d, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 
	0x54, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x32, 0x00, 0x00, 
	0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x67, 0x73, 0x6d, 0x45, 0x6e, 
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x46, 0x75, 0x6c, 0x6c, 
	0x52, 0x61, 0x74, 0x65, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x64, 0x61, 0x74, 
	0x61, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x05, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x61, 0x75, 
	0x64, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 
	0x67, 0x73, 0x6d, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 
	0x64, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x00, 
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 
	0x00, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x6e, 0x69, 
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x00, 0x00, 0x00, 0x07, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x63, 0x6f, 
	0x6d, 0x66, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x69, 0x73, 0x65, 
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x09, 0x73, 0x63, 0x72, 0x61, 0x6d, 0x62, 0x6c, 
	0x65, 0x64
};


unsigned char           padding_begin_chars[2048];
PH323TASK_CONFIG	    pVoipTaskConfig;
H323TASK_CONFIG		    VoipTaskConfiguration;
CALL_CONTROL_BLOCK	    CCBArray[MAX_ACTIVE_CALLS];
RADPIPE	                RadPipeArray[MAX_PIPES_IN_ARRAY];
JCTIMER                 VoipTaskTimerArray[MAX_TIMERS_IN_ARRAY];
API_MESSAGE	            VoipMessageArray[MAX_VOIP_API_MSGS_IN_ARRAY];
unsigned char           padding_end_chars[2048];

JCTask RTPMainTaskObj("RTPmain");
JCTask VOIPTaskObj("VOIPTask");


long int ViperCellIdentifier=0;
char *StackConfigBuffer;
/*
 ************ H.323 Task Management functions *************************
 */

/*
 * H323Task
 */
int H323Task()
{

#ifdef LOOPBACK_MODE

	if ((taskSpawn( "H323Task", 100, 0, 20000, (FUNCPTR)InitializeH323Task,
                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ) )== ERROR )	
	{
		printf("Unable to spawn H323 Task!!\n");
	}
	return (1);
#else
	return(InitializeH323Task());
#endif
	
}


/*
 * InitializeH323Task : The main entry point for this task
 */
int InitializeH323Task()
{
	DBG_FUNC("InitializeH323Task",H323_LAYER);
	DBG_ENTER();
	PCALL_CONTROL_BLOCK	pCCB;
	int 	RetStatus=FALSE,Count=0;
    HCFG hCfg;
    BOOL retVal=FALSE;
    char ConfigBuffer[MAX_STACK_CONFIG_BUFFER_SIZE];



	pVoipTaskConfig = (PH323TASK_CONFIG)&VoipTaskConfiguration;
	ASSERT(pVoipTaskConfig!=NULL);
	if (pVoipTaskConfig == NULL)
	{
		DBG_ERROR("Error in allocating memory for TaskConfig !!\n");
		DBG_LEAVE();
		return RetStatus;
	}
	memset(pVoipTaskConfig,0,sizeof(H323TASK_CONFIG));
	pVoipTaskConfig->Magic = H323TASK_MAGIC_VALUE;

#ifndef LOOPBACK_MODE
    /*
     *   Read in all these values from the OAM and
     *   set them accordingly.
     */

	if (oam_getMibIntVar(MIB_h323_GKPort, (long int*)&pVoipTaskConfig->GKPort) != STATUS_OK)
	{
		DBG_ERROR("Unable to get GateKeeper signalling port from OAM!!\n");
        DBG_LEAVE();
		return RetStatus;
	}
    else {
        DBG_TRACE("GateKeeper signalling port OAM value %ld\n",pVoipTaskConfig->GKPort);
    }

	if (oam_getMibIntVar(MIB_h323_GKIPAddress, (long int*)&pVoipTaskConfig->GKIPAddress) != STATUS_OK)
	{
		DBG_ERROR("Unable to get GateKeeper IP address from OAM!!\n");
        DBG_LEAVE();
		return RetStatus;
	}
    else {
        DBG_TRACE("GateKeeper IP address OAM value %ld\n",pVoipTaskConfig->GKIPAddress);
    }

	if (oam_getMibIntVar(MIB_h323_Q931ResponseTimeOut, (long int*)&pVoipTaskConfig->Q931ResponseTimeOut) != STATUS_OK)
	{
		DBG_ERROR("Unable to get Q.931 response timeout from OAM!!\n");
        DBG_LEAVE();
		return RetStatus;
	}
    else {
        DBG_TRACE("Q.931 response timeout OAM value %ld\n",pVoipTaskConfig->Q931ResponseTimeOut);
    }


	/*
	 * Temporary hack to set default IP gateway's address from OAM through VoIP for now: DSN
	 */
	{
		long int DefGateway;
		unsigned char DefGwIp[4];
		char DefGwIpStr[64];

		if (oam_getMibIntVar(MIB_viperCellDefGateway, (long int*)&DefGateway) != STATUS_OK)
		{
			DBG_ERROR("Unable to get Default Gateway IP address from OAM!!\n");
	        DBG_LEAVE();
			return RetStatus;
		}

	    DefGwIp[0] = (DefGateway >> 24) & 0x000000ff;
	    DefGwIp[1] = (DefGateway >> 16) & 0x000000ff;
	    DefGwIp[2] = (DefGateway >> 8) & 0x000000ff;
	    DefGwIp[3] = (DefGateway) & 0x000000ff;

		memset(DefGwIpStr,0,64);
		sprintf(DefGwIpStr,"%d.%d.%d.%d",DefGwIp[0],DefGwIp[1],DefGwIp[2],DefGwIp[3]);
		
		printf("Setting the default gateway IP address to %s\n",DefGwIpStr);
		vipSetDefaultGateway(DefGwIpStr);

	}

	pVoipTaskConfig->Q931ConnectTimeOut = 500 ; /* Hard coded for now */
    DBG_TRACE("Q.931 connect timeout OAM value %ld\n",pVoipTaskConfig->Q931ConnectTimeOut);




	



	if (oam_getMibIntVar(MIB_h323_Q931CallSignalingPort, (long int*)&pVoipTaskConfig->Q931CallSignalingPort) != STATUS_OK)
	{
		DBG_ERROR("Unable to get Q.931 call signalling port from OAM!!\n");
        DBG_LEAVE();
		return RetStatus;
	}
    else {
        DBG_TRACE("Q.931 call signalling port OAM value %ld\n",pVoipTaskConfig->Q931CallSignalingPort);
    }


	if (oam_getMibIntVar(MIB_h323_t35CountryCode, (long int*)&pVoipTaskConfig->t35CountryCode) != STATUS_OK)
	{
		DBG_ERROR("Unable to get t35 country code from OAM!!\n");
        DBG_LEAVE();
		return RetStatus;
	}
    else {
        DBG_TRACE("t35 country code OAM value %ld\n",pVoipTaskConfig->t35CountryCode);
    }



    pVoipTaskConfig->gkIpAddrOctets[0] = (pVoipTaskConfig->GKIPAddress >> 24) & 0x000000ff;
    pVoipTaskConfig->gkIpAddrOctets[1] = (pVoipTaskConfig->GKIPAddress >> 16) & 0x000000ff;
    pVoipTaskConfig->gkIpAddrOctets[2] = (pVoipTaskConfig->GKIPAddress >> 8) & 0x000000ff;
    pVoipTaskConfig->gkIpAddrOctets[3] = (pVoipTaskConfig->GKIPAddress) & 0x000000ff;
#else
    pVoipTaskConfig->GKPort					= 1719;
    pVoipTaskConfig->Q931ResponseTimeOut	= 150;
    pVoipTaskConfig->Q931ConnectTimeOut		= 500;
    pVoipTaskConfig->Q931CallSignalingPort	= 1720;
    pVoipTaskConfig->t35CountryCode			= 181;

    pVoipTaskConfig->gkIpAddrOctets[0] = 10;
    pVoipTaskConfig->gkIpAddrOctets[1] = 1;
    pVoipTaskConfig->gkIpAddrOctets[2] = 2;
    pVoipTaskConfig->gkIpAddrOctets[3] = 2;

#endif
	pVoipTaskConfig->DefaultCodecGsmFullRate = TRUE;

    memset(pVoipTaskConfig->szGatekeeperAddress,0,MAX_IP_ADDRESS_STRING_LENGTH);

    sprintf(pVoipTaskConfig->szGatekeeperAddress,"%d.%d.%d.%d",
        pVoipTaskConfig->gkIpAddrOctets[0],pVoipTaskConfig->gkIpAddrOctets[1],
        pVoipTaskConfig->gkIpAddrOctets[2],pVoipTaskConfig->gkIpAddrOctets[3]);

    DBG_TRACE("Gatekeeper address reported as %s by OAM\n",pVoipTaskConfig->szGatekeeperAddress);

    hCfg = ciConstructEx((char *)RadConfigBuffer,1024,30);
    if (hCfg < 0) {
        DBG_ERROR("Unable to get configuration handle\n");
        DBG_LEAVE();
        return(RetStatus);        
    }
    /*
     * 
	 */
    StackConfigSetGateKeeperAddress(hCfg,pVoipTaskConfig->gkIpAddrOctets,pVoipTaskConfig->GKPort);
     
    StackConfigSetQ931Parameters(hCfg,pVoipTaskConfig->Q931ResponseTimeOut,pVoipTaskConfig->Q931ConnectTimeOut,
                            pVoipTaskConfig->Q931CallSignalingPort);

    StackConfigSetCountryCode(hCfg,pVoipTaskConfig->t35CountryCode);
            
    memset(ConfigBuffer,0,MAX_STACK_CONFIG_BUFFER_SIZE);
    ciPrepareTargetBuffer(ConfigBuffer,MAX_STACK_CONFIG_BUFFER_SIZE);
    int val = ciSave(hCfg,ConfigBuffer);
    if (val < 0) {
        DBG_ERROR("Unable to save H.323 Stack configuration context\n");
        DBG_LEAVE();
        return(RetStatus);
    }

    StackConfigBuffer = (char *)ConfigBuffer;

    /*InitializeJetRtp();*/
	PipeArrayInit();


	pVoipTaskConfig->pH323TaskInputPipe=NULL;

	pVoipTaskConfig->pH323TaskInputPipe  = RadPipeOpen( 
								"H323MainInputPipe", 
								sizeof(VOIP_API_MESSAGE),
                 				100, 
                 				(pfnCallBackFunction)H323MessageHandler
                 				) ;
   	if(pVoipTaskConfig->pH323TaskInputPipe== NULL)
   	{
      	DBG_ERROR( "Error creating Input Pipe\n" );
      	return FALSE;
	}

	pVoipTaskConfig->StackHandle = InitializeStackInstance();
	ASSERT(pVoipTaskConfig->StackHandle != NULL);
	if (pVoipTaskConfig->StackHandle == NULL)
	{
		DBG_ERROR("Unable to initialize Stack Instance!!\n");
		DBG_LEAVE();
		return RetStatus;
	}


	TimerArrayInit();

	InitializeCallControlBlocks();

   	/* Initialize the RTP task */
   	if( ( pVoipTaskConfig->RtpTaskHandle = RTPMainTaskObj.JCTaskSpawn( RTPMAIN_TASK_PRIORITY, 
   										RTPMAIN_TASK_OPTION, RTPMAIN_TASK_STACK_SIZE, (FUNCPTR)RtpTask,
                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, MODULE_H323,JC_CRITICAL_TASK ) )== ERROR )
   	{
            DBG_ERROR("Error creating RTP Task\n" );
	  DBG_LEAVE();
      return FALSE;
   	}
	int ArraySize ;

	ArraySize = sizeof(API_MESSAGE) * MAX_VOIP_API_MSGS_IN_ARRAY; 
	memset(VoipMessageArray,0,ArraySize);

    
    ShowStackConfigSettings();

    VOIPTaskObj.JCTaskEnterLoop();

	WAIT_FOREVER_FOR_H323_EVENTS();

	VOIPTaskObj.JCTaskNormExit();
	
	DBG_LEAVE();
   	return TRUE;
}




/*
 * InitializeStackInstance
 */
HAPP InitializeStackInstance()
{
	DBG_FUNC("InitializeStackInstance",H323_LAYER);
	DBG_ENTER();
	HAPP StackHandle=NULL;
   	char* pszInitFile;
   	pszInitFile = "config.val";
   	HPVT hPVT;
   	INT32 hRAS;
   	BYTE bmpString[256],bmpString2[256];

	SCMEVENT cmEvent = 
	{ 
		NewCallHandler, 
		RASEventHandler 
	}; 


	 
	SCMCALLEVENT cmCallEvent = 
	{ 
		EventCallStateChanged, 
		NULL, 
		EventCallInfo, 
		NULL, 
		EventCallFacility,
		EventCallFastStartSetup,
		NULL,
		NULL,
		EventCallH450SupplementaryService,
		NULL 
	};
	 

	SCMCONTROLEVENT cmControlEvent = 
	{ 
		EventCallCapabilities, 
		EventCallCapabilitiesExt, 
		EventCallNewChannel, 
		EventCallCapabilitiesResponse, 
		EventCallMasterSlaveStatus, 
		EventCallRoundTripDelay, 
		EventCallUserInput, 
		EventCallRequestMode, 
		EventCallMiscStatus, 
		EventCallControlStateChanged, 
		EventCallMasterSlave 
	}; 


	SCMCHANEVENT cmChannelEvent = 
	{ 
		EventChannelStateChanged, 
		EventChannelNewRate, 
		EventChannelMaxSkew, 
		EventChannelSetAddress, 
		EventChannelSetRTCPAddress, 
		EventChannelParameters, 
		EventChannelRTPDynamicPayloadType, 
		EventChannelVideoFastUpdatePicture, 
		EventChannelVideoFastUpdateGOB, 
		EventChannelVideoFastUpdateMB, 
		EventChannelHandle, 
		EventChannelGetRTCPAddress, 
		EventChannelRequestCloseStatus, 
		EventChannelTSTO, 
		EventChannelMediaLoopStatus, 
		EventChannelReplace, 
		EventChannelFlowControlToZero 
	}; 

	SCMPROTOCOLEVENT cmProtocolEvent = 
	{ 
		NULL, 
		NULL, 
		NULL, 
		NULL, 
		NULL, 
		EventHookSend , 
		EventHookRecv, 
		EventHookSendTo, 
		EventHookRecvFrom, 
		NULL 
	};


SSSECALLEVENT   cmSupplementaryServiceEvent=
        {
			suppEventForwardActivated,
			suppEventForwardDeactivated,
			suppEventCallTransfer,
			suppEventCallReroute
        };




   /* make sure config.val has the following keys:
    * system.manualStart - NOT defined
    * RAS.manualRAS - NOT defined
    * RAS.manualRegistration - defined
    * and correct settings for keys common to all terminals
    */
#ifdef USE_RAD_CONFIG_FILE
	if( cmInitialize( pszInitFile, &StackHandle ) < 0 ) 
#else
	if( cmInitialize((char *)StackConfigBuffer, &StackHandle ) < 0 ) 
#endif
	{
      DBG_ERROR( "Error in cmInitialize(), error : %d \n", errnoGet());
	  DBG_LEAVE();
      return NULL;
	}



	sseInit(StackConfigBuffer,&pVoipTaskConfig->SuppStackHandle,NULL,StackHandle,100);
    pVoipTaskConfig->SuppAppHandle = sseGetSSHandle(pVoipTaskConfig->SuppStackHandle);


	cmSetGenEventHandler( StackHandle, &cmEvent, sizeof( SCMEVENT ) );
	cmSetCallEventHandler( StackHandle, &cmCallEvent, sizeof( SCMCALLEVENT ) );
	cmSetControlEventHandler( StackHandle, &cmControlEvent, sizeof( SCMCONTROLEVENT ) );
	cmSetChannelEventHandler( StackHandle, &cmChannelEvent, sizeof( SCMCHANEVENT ) );
	cmSetProtocolEventHandler( StackHandle, &cmProtocolEvent, sizeof( SCMPROTOCOLEVENT ) );

   	if( 0 == ( pVoipTaskConfig->hsTimer = mtimerInit( RAD_MAX_TIMERS, NULL ) ) )
	{
		DBG_ERROR("Unable to create timer!!\n");
		DBG_LEAVE();
		return NULL;
	}

	{
	    char localAddrStr[64];
        cmRASTransport tr;
		sseSetCallEventHandler(pVoipTaskConfig->SuppStackHandle,&cmSupplementaryServiceEvent,
							sizeof(SSSECALLEVENT));
	    cmGetLocalCallSignalAddress(StackHandle,&tr);
	    sprintf(localAddrStr,"TA:%d.%d.%d.%d:%d",
				(int)((unsigned char*)&(tr.ip))[0],(int)((unsigned char*)&(tr.ip))[1],
	            (int)((unsigned char*)&(tr.ip))[2],(int)((unsigned char*)&(tr.ip))[3],tr.port);
		sseSetDefaultAddress(pVoipTaskConfig->SuppStackHandle,localAddrStr);
	}


	DBG_LEAVE();
   	return StackHandle;
}








/*
 * StackConfigSetQ931Parameters
 */
BOOL
StackConfigSetQ931Parameters(HCFG hCfg,unsigned long OAMResponseTimeout,
                unsigned long OAMConnectTimeout,unsigned long OAMSignallingPort)
{
    DBG_FUNC("StackConfigSetQ931Parameters",H323_LAYER);
    DBG_ENTER();
    int retCode,len=100;
    BOOL retStatus=FALSE;
    char *responseTimeoutPath="Q931.responseTimeOut";
    char *connectTimeoutPath="Q931.connectTimeOut";
    char *signallingPortPath="Q931.callSignalingPort";

    int ResponseTimeout, ConnectTimeout,SignallingPort;

    ResponseTimeout = OAMResponseTimeout;  
    ConnectTimeout  = OAMConnectTimeout;
    SignallingPort  = OAMSignallingPort;

    retCode=ciSetValue(hCfg,responseTimeoutPath,FALSE,ResponseTimeout,NULL);
    if (retCode < 0) {
        DBG_ERROR("Unable to set Q.931 Response timeout\n");
        DBG_LEAVE();
        return(retStatus);
    }

    retCode=ciSetValue(hCfg,connectTimeoutPath,FALSE,ConnectTimeout,NULL);
    if (retCode < 0) {
        DBG_ERROR("Unable to set Q.931 Response timeout\n");
        DBG_LEAVE();
        return(retStatus);
    }

    retCode=ciSetValue(hCfg,signallingPortPath,FALSE,SignallingPort,NULL);
    if (retCode < 0) {
        DBG_ERROR("Unable to set Q.931 call signalling port\n");
        DBG_LEAVE();
        return(retStatus);
    }
    else {
        DBG_TRACE("Q.931 parameters configured successfully\n");
        retStatus = TRUE;
    }
    DBG_LEAVE();
    return(retStatus);
}


/*
 * StackConfigSetCountryCode
 */
BOOL
StackConfigSetCountryCode(HCFG hCfg,unsigned long OAMCountryCode)
{
    DBG_FUNC("StackConfigSetCountryCode",H323_LAYER);
    DBG_ENTER();
    int CountryCode = OAMCountryCode;

    char *CountryCodePath="RAS.registrationInfo.terminalType.vendor.vendor.t35CountryCode";
    int retCode,len=100;
    BOOL retStatus =FALSE;

    retCode=ciSetValue(hCfg,CountryCodePath,FALSE,CountryCode,NULL);
    if (retCode < 0) {
        DBG_ERROR("Unable to set Country Code\n");
        DBG_LEAVE();
        return(retStatus);
    }
    else {
        retStatus=TRUE;
    }
    
    DBG_LEAVE();
    return(retStatus);
}



/*
 * StackConfigSetGateKeeperAddress
 */
BOOL
StackConfigSetGateKeeperAddress(HCFG hCfg,unsigned char *ipAddress, unsigned long port)
{
    DBG_FUNC("StackConfigSetGateKeeperAddress",H323_LAYER);
    DBG_ENTER();

    unsigned char buf[100];
    int retCode,len=100;
    BOOL isString,retStatus=FALSE;
    char *gkIpAddrPath="RAS.manualDiscovery.defaultGatekeeper.ipAddress.ip";
    char *gkIpPortPath="RAS.manualDiscovery.defaultGatekeeper.ipAddress.port";

    memset(buf,0,100);
    memcpy(buf,ipAddress,4);

    retCode=ciSetValue(hCfg,gkIpAddrPath,TRUE,4,(char *)buf);
    if (retCode < 0) {
        DBG_ERROR("Unable to set gatekeeper ip address\n");
        DBG_LEAVE();
        return(retStatus);
    }
    memset(buf,0,100);
    retCode=ciGetValue(hCfg,gkIpAddrPath,&isString,&len);
    retCode=ciGetString(hCfg,gkIpAddrPath,(char *)buf,100);
    if (retCode > 0) {
        DBG_TRACE("Gatekeeper IP address set to %d.%d.%d.%d\n",
            buf[0],buf[1],buf[2],buf[3]);
    }

    retCode=ciSetValue(hCfg,gkIpPortPath,FALSE,port,NULL);
    if (retCode < 0) {
        DBG_ERROR("Unable to set gatekeeper ip port\n");
        DBG_LEAVE();
        return(retStatus);
    }
    else {
        retStatus=TRUE;
    }
    DBG_LEAVE();
    return(retStatus);
}




/*
 * ShowStackConfigSettings
 */
void
ShowStackConfigSettings()
{
    DBG_FUNC("ShowStackConfigSettings",H323_LAYER);
    DBG_ENTER();

    BOOL isString;
    unsigned char buf[100];
    int len;
    INT32 gkPort=0;
    int ResponseTimeout=0, ConnectTimeout=0, SignallingPort=0,CountryCode=0;

	HPVT hVal=cmGetValTree(pVoipTaskConfig->StackHandle);
	int i=cmGetRASConfigurationHandle(pVoipTaskConfig->StackHandle);
    int nodeId=pvtGetByPath(hVal,i,"manualDiscovery.defaultGatekeeper.ipAddress.ip",NULL,&len,&isString);
    if (isString) {
        memset(buf,0,100);
        buf[min(99,len)]=0;
        pvtGetString(hVal,nodeId,min(99,len),(char *)buf);    
    }
	pvtGetByPath(hVal, i, "manualDiscovery.defaultGatekeeper.ipAddress.port", NULL, &gkPort, NULL);		

    DBG_TRACE("GK Address currently set to %d.%d.%d.%d, port %d\n",buf[0],buf[1],buf[2],buf[3],gkPort);

	pvtGetByPath(hVal, i, "registrationInfo.terminalType.vendor.vendor.t35CountryCode", NULL, &CountryCode, NULL);		

    i = cmGetQ931ConfigurationHandle(pVoipTaskConfig->StackHandle);

	pvtGetByPath(hVal, i, "responseTimeOut", NULL, &ResponseTimeout, NULL);		
	pvtGetByPath(hVal, i, "connectTimeOut", NULL, &ConnectTimeout, NULL);		
	pvtGetByPath(hVal, i, "callSignalingPort", NULL, &SignallingPort, NULL);		

    DBG_TRACE("Q.931 params:-\n responseTimeout %d ; connectTimeout %d ; callSignallingPort %d\n",
            ResponseTimeout,ConnectTimeout,SignallingPort);
    DBG_TRACE("Country code set to %d\n",CountryCode);

    DBG_LEAVE();
}



